<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:bitbucket-api-calls.xml"/>
        <spring:import resource="classpath:global.xml"/>
        <spring:import resource="classpath:bitbucket-integration.xml"/>
        <spring:import resource="classpath:integration-token-operations.xml"/>
        <spring:import resource="classpath:core-services-invocations.xml"/>
    </spring:beans>
    <munit:test name="bitbucket-api-calls-test-suite-postBitbucketTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;authSettings&quot;:{&quot;code&quot;:&quot;4jN469zxvw3KP334YD&quot;}}]" doc:name="Set Auth Settings Code"/>
        <flow-ref name="postBitbucketTokenFlow" doc:name="postBitbucketTokenFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-getBitbucketUserFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <flow-ref name="getBitbucketUserFlow" doc:name="getBitbucketUserFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-getBitbucketRepositoriesFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
        </mock:when>
        <flow-ref name="getBitbucketRepositoriesFlow" doc:name="getBitbucketRepositoriesFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-postBitbucketHookFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
        </mock:when>
        <set-variable variableName="hookBody" value="#[{&quot;description&quot;:&quot;cisco_bitbucket&quot;,&quot;url&quot;:&quot;https://cisco-spark-integration-management-new-dev.cloudhub.io/api/hooks/3a8f6bc0-6bb1-11e6-9a89-0603f5b6d565&quot;,&quot;events&quot;:[&quot;repo:push&quot;,&quot;issue:created&quot;,&quot;pullrequest:created&quot;],&quot;active&quot;:true}]" doc:name="Set Hook Body"/>
        <flow-ref name="postBitbucketHookFlow" doc:name="postBitbucketHookFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-putBitbucketHookFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="hookBody" value="#[{&quot;description&quot;:&quot;cisco_bitbucket&quot;,&quot;url&quot;:&quot;https://cisco-spark-integration-management-new-dev.cloudhub.io/api/hooks/3a8f6bc0-6bb1-11e6-9a89-0603f5b6d565&quot;,&quot;events&quot;:[&quot;repo:push&quot;,&quot;issue:created&quot;,&quot;pullrequest:created&quot;],&quot;active&quot;:true}]" doc:name="Set Hook Body"/>
        <set-variable variableName="hookId" value="1" doc:name="Set Hook Id"/>
        <flow-ref name="putBitbucketHookFlow" doc:name="Flow-ref to putBitbucketHookFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-refreshBitbucketTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
   "client_id": '${bitbucket.integration.client.id}',
   "client_secret": '${bitbucket.integration.client.secret}',
   "grant_type": 'refresh_token',
   "refresh_token": flowVars.refreshToken

}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="refreshBitbucketTokenFlow" doc:name="refreshBitbucketTokenFlow"/>
        <munit:assert-not-null message="Expected: Refresh token details, Got : Null payload" doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-deleteBitbucketHookFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="hookId" value="#['{hjjkhdjfs145620dsfjgkldfgklsdf4}']" doc:name="Variable"/>
        <flow-ref name="deleteBitbucketHookFlow" doc:name="Flow-ref to deleteBitbucketHookFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-api-calls-test-suite-getBitbucketHookFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="token" value="Bearer #[flowVars.token]" doc:name="Set Token"/>
        <set-variable variableName="hookId" value="#[flowVars.hookId]" doc:name="Set HookId"/>
        <set-variable variableName="repository" value="#[flowVars.repository]" doc:name="Set Repository"/>
        <set-variable variableName="user" value="#[flowVars.user]" doc:name="Set User"/>
        <flow-ref name="getBitbucketHookFlow" doc:name="Flow-ref to getBitbucketHookFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="core-services-invocations-test-suite-coreServicesAlertsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${bitbucket.integration.client.id}" doc:name="Set ClientId"/>
        <set-variable variableName="client_secret" value="${bitbucket.integration.client.secret}" doc:name="Set ClientSecret"/>
        <flow-ref name="coreServicesAlertsFlow" doc:name="Flow-ref to coreServicesAlertsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="core-services-invocations-test-suite-coreServicesLoggingFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${bitbucket.integration.client.id}" doc:name="Set ClientId"/>
        <set-variable variableName="client_secret" value="${bitbucket.integration.client.secret}" doc:name="Set ClientSecret"/>
        <flow-ref name="coreServicesLoggingFlow" doc:name="Flow-ref to coreServicesLoggingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="core-services-invocations-test-suite-coreServicesTrackingFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="${bitbucket.integration.client.id}" doc:name="Set ClientId"/>
        <set-variable variableName="client_secret" value="${bitbucket.integration.client.secret}" doc:name="Set ClientSecret"/>
        <flow-ref name="coreServicesTrackingFlow" doc:name="Flow-ref to coreServicesTrackingFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="integration-token-operations-test-suite-getIntegrationTokenFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-variable variableName="client_id" value="#['111']" doc:name="Set ClientId"/>
        <set-variable variableName="client_secret" value="#['111']" doc:name="Set ClientSecret"/>
        <set-variable variableName="userId" value="#['Y2lzY29zcGFyazovL3VzL1BFT1BMRS83NzcyOTRkNy03NWZmLTQ5YmEtYjE5Yy02NzcyMTExMGYwMjM']" doc:name="Set UserId"/>
        <set-variable variableName="integrationId" value="#['Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzAyM2RmYmMwLTQ5MjUtNDc1NC05ZDJiLTdkMjE0NmY4ZDllMg']" doc:name="Set IntegrationId"/>
        <flow-ref name="getIntegrationTokenFlow" doc:name="getIntegrationTokenFlow"/>
        <munit:assert-null doc:name="Assert Null Payload"/>
    </munit:test>
    <munit:test name="integration-token-operations-test-suite-putIntegrationTokenOperationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-variable variableName="refreshResult"><![CDATA[%dw 1.0
%output application/json
---
{
  "access_token": "32ergejwrenfwfwjr3or3j-fskjnegkeglnr-2315245",
  "expires_in":123,
  "refresh_token": "2312313gsgsdgregsgegegw-gerweaewaxd32"
}
]]></dw:set-variable>
        </dw:transform-message>
        <set-variable variableName="integrationId" value="#['Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzAyM2RmYmMwLTQ5MjUtNDc1NC05ZDJiLTdkMjE0NmY4ZDllMg']" doc:name="Set integrationId"/>
        <set-variable variableName="appTokenId" value="#['123']" doc:name="Set AppTokenId"/>
        <flow-ref name="putIntegrationTokenOperationFlow" doc:name="putIntegrationTokenOperationFlow"/>
        <logger message="MSGGGGGGGGGGGGGGG #[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-not-null message="kksdksdfsjdj" doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="integration-token-operations-test-suite-putIntegrationInstanceTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <flow-ref name="putIntegrationInstance" doc:name="putIntegrationInstance"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-integration-test-suite-postAuthDetailsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[{&quot;authSettings&quot;:{&quot;code&quot;:&quot;4jN469zxvw3KP334YD&quot;}}]" doc:name="Set Payload"/>
        <flow-ref name="postAuthDetailsFlow" doc:name="postAuthDetailsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-Oauth-test-suite-postIntegrationSettingsFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#['{&quot;integrationId&quot;:&quot;Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzAyM2RmYmMwLTQ5MjUtNDc1NC05ZDJiLTdkMjE0NmY4ZDllMg&quot;,&quot;userId&quot;:&quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI&quot;}']" doc:name="Set Payload"/>
        <flow-ref name="postIntegrationSettingsFlow" doc:name="postIntegrationSettingsFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-Oauth-test-suite-setupIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#['{&quot;channelId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1JPT00vYTIxMzIzOWQtZDM3YS0zMzhiLWE4ZjMtNDU1MzdjZWZjMmEw&quot;,&quot;integrationId&quot;: &quot;1&quot;,&quot;status&quot;: &quot;ACTIVE&quot;,&quot;instanceId&quot;:&quot;483&quot;,&quot;userId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI&quot;,&quot;configJson&quot;: {&quot;room_name&quot;: &quot;Rakesh&quot;,&quot;repo_id&quot;: &quot;{021a2c02-fd3a-4cb9-ac08-ce63c655f0ba}&quot;,&quot;repo_name&quot;: &quot;new-repo&quot;,&quot;user_name&quot;: &quot;Surender Reddy Molugu&quot;,&quot;owner_name&quot;: &quot;tirapa-eidiko&quot;,&quot;authenticated_to&quot;: &quot;tirapa-eidiko&quot;,&quot;displayName&quot;: &quot;Bitbucket&quot;,&quot;events&quot;: [&quot;pullrequest:created&quot;, &quot;issue:comment_created&quot;, &quot;issue:created&quot;, &quot;repo:push&quot;]}}']" doc:name="Set Payload"/>
        <flow-ref name="setupIntegrationFlow" doc:name="Flow-ref to setupIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-Oauth-test-suite-updateIntegrationFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#['{&quot;channelId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1JPT00vYTIxMzIzOWQtZDM3YS0zMzhiLWE4ZjMtNDU1MzdjZWZjMmEw&quot;,&quot;integrationId&quot;: &quot;1&quot;,&quot;status&quot;: &quot;ACTIVE&quot;,&quot;instanceId&quot;:&quot;483&quot;,&quot;userId&quot;: &quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI&quot;,&quot;configJson&quot;: {&quot;room_name&quot;: &quot;Rakesh&quot;,&quot;repo_id&quot;: &quot;{021a2c02-fd3a-4cb9-ac08-ce63c655f0ba}&quot;,&quot;repo_name&quot;: &quot;new-repo&quot;,&quot;user_name&quot;: &quot;Surender Reddy Molugu&quot;,&quot;owner_name&quot;: &quot;tirapa-eidiko&quot;,&quot;authenticated_to&quot;: &quot;tirapa-eidiko&quot;,&quot;webhookUuid&quot;:&quot;jkjadjkasdfjjksdfjsdf&quot;,&quot;displayName&quot;: &quot;Bitbucket&quot;,&quot;events&quot;: [&quot;pullrequest:created&quot;, &quot;issue:comment_created&quot;, &quot;issue:created&quot;, &quot;repo:push&quot;]}}']" doc:name="Set Payload"/>
        <flow-ref name="updateIntegrationFlow" doc:name="updateIntegrationFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-Oauth-test-suite-postFormatMessageFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#['{&quot;hookResponse&quot;:{}}']" mimeType="application/json" doc:name="Set Payload"/>
        <flow-ref name="postFormatMessageFlow" doc:name="postFormatMessageFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="bitbucket-Oauth-test-suite-healthCheckFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#['{&quot;integrationId&quot;:&quot;Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OLzAyM2RmYmMwLTQ5MjUtNDc1NC05ZDJiLTdkMjE0NmY4ZDllMg&quot;,&quot;userId&quot;:&quot;Y2lzY29zcGFyazovL3VzL1BFT1BMRS8yYTA0YzVkMy0yNGJjLTQ1ZWItYmQzYS05ZDU1OGRmMmZhMjI&quot;}']" doc:name="Set Payload"/>
        <flow-ref name="healthCheckFlow" doc:name="Flow-ref to healthCheckFlow"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
</mule>
